{"version":3,"file":"static/js/664.79f0fcd9.chunk.js","mappings":"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","sources":["../node_modules/date-fns/_lib/defaultOptions.js","../node_modules/date-fns/_lib/normalizeDates.js","../node_modules/date-fns/constants.js","../node_modules/date-fns/constructFrom.js","../node_modules/date-fns/locale/en-US/_lib/formatDistance.js","../node_modules/date-fns/locale/en-US/_lib/formatLong.js","../node_modules/date-fns/locale/en-US/_lib/formatRelative.js","../node_modules/date-fns/locale/en-US/_lib/localize.js","../node_modules/date-fns/locale/en-US/_lib/match.js","../node_modules/date-fns/locale/en-US.js","../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","../node_modules/date-fns/startOfDay.js","../node_modules/date-fns/differenceInCalendarDays.js","../node_modules/date-fns/startOfYear.js","../node_modules/date-fns/getDayOfYear.js","../node_modules/date-fns/startOfISOWeek.js","../node_modules/date-fns/getISOWeekYear.js","../node_modules/date-fns/startOfISOWeekYear.js","../node_modules/date-fns/getISOWeek.js","../node_modules/date-fns/getWeekYear.js","../node_modules/date-fns/startOfWeekYear.js","../node_modules/date-fns/getWeek.js","../node_modules/date-fns/_lib/addLeadingZeros.js","../node_modules/date-fns/_lib/format/lightFormatters.js","../node_modules/date-fns/_lib/format/formatters.js","../node_modules/date-fns/_lib/format/longFormatters.js","../node_modules/date-fns/_lib/protectedTokens.js","../node_modules/date-fns/isDate.js","../node_modules/date-fns/isValid.js","../node_modules/date-fns/format.js","../node_modules/date-fns/locale/_lib/buildFormatLongFn.js","../node_modules/date-fns/locale/_lib/buildLocalizeFn.js","../node_modules/date-fns/locale/_lib/buildMatchFn.js","../node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","../node_modules/date-fns/locale/ru/_lib/formatDistance.js","../node_modules/date-fns/locale/ru/_lib/formatLong.js","../node_modules/date-fns/isSameWeek.js","../node_modules/date-fns/locale/ru/_lib/formatRelative.js","../node_modules/date-fns/locale/ru/_lib/localize.js","../node_modules/date-fns/locale/ru/_lib/match.js","../node_modules/date-fns/locale/ru.js","../node_modules/date-fns/parseISO.js","../node_modules/date-fns/startOfWeek.js","../node_modules/date-fns/toDate.js"],"sourcesContent":["let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","function declension(scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one;\n  }\n\n  const rem10 = count % 10;\n  const rem100 = count % 100;\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace(\"{{count}}\", String(count));\n\n    // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace(\"{{count}}\", String(count));\n\n    // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace(\"{{count}}\", String(count));\n  }\n}\n\nfunction buildLocalizeTokenFn(scheme) {\n  return (count, options) => {\n    if (options?.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count);\n        } else {\n          return \"через \" + declension(scheme.regular, count);\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count);\n        } else {\n          return declension(scheme.regular, count) + \" назад\";\n        }\n      }\n    } else {\n      return declension(scheme.regular, count);\n    }\n  };\n}\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: buildLocalizeTokenFn({\n    regular: {\n      one: \"меньше секунды\",\n      singularNominative: \"меньше {{count}} секунды\",\n      singularGenitive: \"меньше {{count}} секунд\",\n      pluralGenitive: \"меньше {{count}} секунд\",\n    },\n    future: {\n      one: \"меньше, чем через секунду\",\n      singularNominative: \"меньше, чем через {{count}} секунду\",\n      singularGenitive: \"меньше, чем через {{count}} секунды\",\n      pluralGenitive: \"меньше, чем через {{count}} секунд\",\n    },\n  }),\n\n  xSeconds: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} секунда\",\n      singularGenitive: \"{{count}} секунды\",\n      pluralGenitive: \"{{count}} секунд\",\n    },\n    past: {\n      singularNominative: \"{{count}} секунду назад\",\n      singularGenitive: \"{{count}} секунды назад\",\n      pluralGenitive: \"{{count}} секунд назад\",\n    },\n    future: {\n      singularNominative: \"через {{count}} секунду\",\n      singularGenitive: \"через {{count}} секунды\",\n      pluralGenitive: \"через {{count}} секунд\",\n    },\n  }),\n\n  halfAMinute: (_count, options) => {\n    if (options?.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        return \"через полминуты\";\n      } else {\n        return \"полминуты назад\";\n      }\n    }\n\n    return \"полминуты\";\n  },\n\n  lessThanXMinutes: buildLocalizeTokenFn({\n    regular: {\n      one: \"меньше минуты\",\n      singularNominative: \"меньше {{count}} минуты\",\n      singularGenitive: \"меньше {{count}} минут\",\n      pluralGenitive: \"меньше {{count}} минут\",\n    },\n    future: {\n      one: \"меньше, чем через минуту\",\n      singularNominative: \"меньше, чем через {{count}} минуту\",\n      singularGenitive: \"меньше, чем через {{count}} минуты\",\n      pluralGenitive: \"меньше, чем через {{count}} минут\",\n    },\n  }),\n\n  xMinutes: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} минута\",\n      singularGenitive: \"{{count}} минуты\",\n      pluralGenitive: \"{{count}} минут\",\n    },\n    past: {\n      singularNominative: \"{{count}} минуту назад\",\n      singularGenitive: \"{{count}} минуты назад\",\n      pluralGenitive: \"{{count}} минут назад\",\n    },\n    future: {\n      singularNominative: \"через {{count}} минуту\",\n      singularGenitive: \"через {{count}} минуты\",\n      pluralGenitive: \"через {{count}} минут\",\n    },\n  }),\n\n  aboutXHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} часа\",\n      singularGenitive: \"около {{count}} часов\",\n      pluralGenitive: \"около {{count}} часов\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} час\",\n      singularGenitive: \"приблизительно через {{count}} часа\",\n      pluralGenitive: \"приблизительно через {{count}} часов\",\n    },\n  }),\n\n  xHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} час\",\n      singularGenitive: \"{{count}} часа\",\n      pluralGenitive: \"{{count}} часов\",\n    },\n  }),\n\n  xDays: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} день\",\n      singularGenitive: \"{{count}} дня\",\n      pluralGenitive: \"{{count}} дней\",\n    },\n  }),\n\n  aboutXWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} недели\",\n      singularGenitive: \"около {{count}} недель\",\n      pluralGenitive: \"около {{count}} недель\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} неделю\",\n      singularGenitive: \"приблизительно через {{count}} недели\",\n      pluralGenitive: \"приблизительно через {{count}} недель\",\n    },\n  }),\n\n  xWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} неделя\",\n      singularGenitive: \"{{count}} недели\",\n      pluralGenitive: \"{{count}} недель\",\n    },\n  }),\n\n  aboutXMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} месяца\",\n      singularGenitive: \"около {{count}} месяцев\",\n      pluralGenitive: \"около {{count}} месяцев\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} месяц\",\n      singularGenitive: \"приблизительно через {{count}} месяца\",\n      pluralGenitive: \"приблизительно через {{count}} месяцев\",\n    },\n  }),\n\n  xMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} месяц\",\n      singularGenitive: \"{{count}} месяца\",\n      pluralGenitive: \"{{count}} месяцев\",\n    },\n  }),\n\n  aboutXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} года\",\n      singularGenitive: \"около {{count}} лет\",\n      pluralGenitive: \"около {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} год\",\n      singularGenitive: \"приблизительно через {{count}} года\",\n      pluralGenitive: \"приблизительно через {{count}} лет\",\n    },\n  }),\n\n  xYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} год\",\n      singularGenitive: \"{{count}} года\",\n      pluralGenitive: \"{{count}} лет\",\n    },\n  }),\n\n  overXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"больше {{count}} года\",\n      singularGenitive: \"больше {{count}} лет\",\n      pluralGenitive: \"больше {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"больше, чем через {{count}} год\",\n      singularGenitive: \"больше, чем через {{count}} года\",\n      pluralGenitive: \"больше, чем через {{count}} лет\",\n    },\n  }),\n\n  almostXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"почти {{count}} год\",\n      singularGenitive: \"почти {{count}} года\",\n      pluralGenitive: \"почти {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"почти через {{count}} год\",\n      singularGenitive: \"почти через {{count}} года\",\n      pluralGenitive: \"почти через {{count}} лет\",\n    },\n  }),\n};\n\nexport const formatDistance = (token, count, options) => {\n  return formatDistanceLocale[token](count, options);\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d MMMM y 'г.'\",\n  long: \"d MMMM y 'г.'\",\n  medium: \"d MMM y 'г.'\",\n  short: \"dd.MM.y\",\n};\n\nconst timeFormats = {\n  full: \"H:mm:ss zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  any: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"any\",\n  }),\n};\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link isSameWeek} function options.\n */\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week (and month and year)?\n *\n * @description\n * Are the given dates in the same week (and month and year)?\n *\n * @param laterDate - The first date to check\n * @param earlierDate - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same week (and month and year)\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n *\n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same week?\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\nexport function isSameWeek(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return (\n    +startOfWeek(laterDate_, options) === +startOfWeek(earlierDate_, options)\n  );\n}\n\n// Fallback for modularized imports:\nexport default isSameWeek;\n","import { isSameWeek } from \"../../../isSameWeek.js\";\n\nconst accusativeWeekdays = [\n  \"воскресенье\",\n  \"понедельник\",\n  \"вторник\",\n  \"среду\",\n  \"четверг\",\n  \"пятницу\",\n  \"субботу\",\n];\n\nfunction lastWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n      return \"'в прошлое \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в прошлый \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в прошлую \" + weekday + \" в' p\";\n  }\n}\n\nfunction thisWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  if (day === 2 /* Tue */) {\n    return \"'во \" + weekday + \" в' p\";\n  } else {\n    return \"'в \" + weekday + \" в' p\";\n  }\n}\n\nfunction nextWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n      return \"'в следующее \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в следующий \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в следующую \" + weekday + \" в' p\";\n  }\n}\n\nconst formatRelativeLocale = {\n  lastWeek: (date, baseDate, options) => {\n    const day = date.getDay();\n    if (isSameWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return lastWeek(day);\n    }\n  },\n  yesterday: \"'вчера в' p\",\n  today: \"'сегодня в' p\",\n  tomorrow: \"'завтра в' p\",\n  nextWeek: (date, baseDate, options) => {\n    const day = date.getDay();\n    if (isSameWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return nextWeek(day);\n    }\n  },\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, baseDate, options) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date, baseDate, options);\n  }\n\n  return format;\n};\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"до н.э.\", \"н.э.\"],\n  abbreviated: [\"до н. э.\", \"н. э.\"],\n  wide: [\"до нашей эры\", \"нашей эры\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"1-й кв.\", \"2-й кв.\", \"3-й кв.\", \"4-й кв.\"],\n  wide: [\"1-й квартал\", \"2-й квартал\", \"3-й квартал\", \"4-й квартал\"],\n};\n\nconst monthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"март\",\n    \"апр.\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n\n  wide: [\n    \"январь\",\n    \"февраль\",\n    \"март\",\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"август\",\n    \"сентябрь\",\n    \"октябрь\",\n    \"ноябрь\",\n    \"декабрь\",\n  ],\n};\n\nconst formattingMonthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"мар.\",\n    \"апр.\",\n    \"мая\",\n    \"июн.\",\n    \"июл.\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n\n  wide: [\n    \"января\",\n    \"февраля\",\n    \"марта\",\n    \"апреля\",\n    \"мая\",\n    \"июня\",\n    \"июля\",\n    \"августа\",\n    \"сентября\",\n    \"октября\",\n    \"ноября\",\n    \"декабря\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"В\", \"П\", \"В\", \"С\", \"Ч\", \"П\", \"С\"],\n  short: [\"вс\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"],\n  abbreviated: [\"вск\", \"пнд\", \"втр\", \"срд\", \"чтв\", \"птн\", \"суб\"],\n  wide: [\n    \"воскресенье\",\n    \"понедельник\",\n    \"вторник\",\n    \"среда\",\n    \"четверг\",\n    \"пятница\",\n    \"суббота\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"веч.\",\n    night: \"ночь\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"веч.\",\n    night: \"ночь\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полночь\",\n    noon: \"полдень\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"вечер\",\n    night: \"ночь\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночи\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночи\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полночь\",\n    noon: \"полдень\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"вечера\",\n    night: \"ночи\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const number = Number(dirtyNumber);\n  const unit = options?.unit;\n\n  let suffix;\n  if (unit === \"date\") {\n    suffix = \"-е\";\n  } else if (unit === \"week\" || unit === \"minute\" || unit === \"second\") {\n    suffix = \"-я\";\n  } else {\n    suffix = \"-й\";\n  }\n\n  return number + suffix;\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"any\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^((до )?н\\.?\\s?э\\.?)/i,\n  abbreviated: /^((до )?н\\.?\\s?э\\.?)/i,\n  wide: /^(до нашей эры|нашей эры|наша эра)/i,\n};\nconst parseEraPatterns = {\n  any: [/^д/i, /^н/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,\n  wide: /^[1234](-?[ыои]?й?)? квартал/i,\n};\n\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[яфмаисонд]/i,\n  abbreviated:\n    /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\\.?/i,\n  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i,\n};\n\nconst parseMonthPatterns = {\n  narrow: [\n    /^я/i,\n    /^ф/i,\n    /^м/i,\n    /^а/i,\n    /^м/i,\n    /^и/i,\n    /^и/i,\n    /^а/i,\n    /^с/i,\n    /^о/i,\n    /^н/i,\n    /^я/i,\n  ],\n\n  any: [\n    /^я/i,\n    /^ф/i,\n    /^мар/i,\n    /^ап/i,\n    /^ма[йя]/i,\n    /^июн/i,\n    /^июл/i,\n    /^ав/i,\n    /^с/i,\n    /^о/i,\n    /^н/i,\n    /^д/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[впсч]/i,\n  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,\n  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i,\n};\n\nconst parseDayPatterns = {\n  narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  abbreviated: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i,\n};\n\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^дп/i,\n    pm: /^пп/i,\n    midnight: /^полн/i,\n    noon: /^полд/i,\n    morning: /^у/i,\n    afternoon: /^д[ен]/i,\n    evening: /^в/i,\n    night: /^н/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./ru/_lib/formatDistance.js\";\nimport { formatLong } from \"./ru/_lib/formatLong.js\";\nimport { formatRelative } from \"./ru/_lib/formatRelative.js\";\nimport { localize } from \"./ru/_lib/localize.js\";\nimport { match } from \"./ru/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Russian locale.\n * @language Russian\n * @iso-639-2 rus\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const ru = {\n  code: \"ru\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default ru;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"],"names":["defaultOptions","getDefaultOptions","normalizeDates","context","_len","arguments","length","dates","Array","_key","normalize","constructFrom","bind","find","date","map","Math","pow","millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","constructFromSymbol","Symbol","for","value","Date","constructor","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatLong","buildFormatLongFn","formats","full","long","medium","short","defaultWidth","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","localize","ordinalNumber","dirtyNumber","_options","number","Number","rem100","era","buildLocalizeFn","values","narrow","abbreviated","wide","quarter","argumentCallback","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","formattingValues","defaultFormattingWidth","enUS","code","formatDistance","token","count","options","result","tokenValue","replace","toString","addSuffix","comparison","formatRelative","_date","_baseDate","match","buildMatchPatternFn","matchPattern","parsePattern","valueCallback","parseInt","buildMatchFn","matchPatterns","defaultMatchWidth","parsePatterns","any","defaultParseWidth","index","weekStartsOn","firstWeekContainsDate","getTimezoneOffsetInMilliseconds","toDate","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","in","setHours","differenceInCalendarDays","laterDate","earlierDate","laterDate_","earlierDate_","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","round","startOfYear","date_","setFullYear","getDayOfYear","startOfISOWeek","startOfWeek","_objectSpread","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","startOfISOWeekYear","fourthOfJanuary","getISOWeek","diff","getWeekYear","_ref","_ref2","_ref3","_options$firstWeekCon","_options$locale","_defaultOptions$local","locale","firstWeekOfNextYear","firstWeekOfThisYear","startOfWeekYear","firstWeek","getWeek","addLeadingZeros","targetLength","abs","padStart","lightFormatters","y","signedYear","M","String","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","trunc","dayPeriodEnum","formatters","G","width","unit","Y","signedWeekYear","weekYear","R","u","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","getDay","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","delimiter","undefined","sign","absOffset","minutes","dateLongFormatter","pattern","timeLongFormatter","longFormatters","p","P","dateTimeLongFormatter","matchResult","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isDate","Object","prototype","call","isValid","isNaN","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","formatStr","_ref4","_options$locale2","_ref5","_ref6","_ref7","_options$weekStartsOn","_options$locale3","_defaultOptions$local2","defaultLocale","originalDate","RangeError","parts","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","test","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","input","_message","subject","concat","message","console","warn","includes","warnOrThrowProtectedError","formatter","matched","args","valuesArray","string","matchedString","key","isArray","array","predicate","findIndex","object","hasOwnProperty","findKey","rest","slice","parseResult","declension","scheme","rem10","singularNominative","singularGenitive","pluralGenitive","buildLocalizeTokenFn","future","regular","past","_count","isSameWeek","accusativeWeekdays","thisWeek","weekday","baseDate","suffix","ru","parseISO","argument","_options$additionalDi","invalidDate","NaN","additionalDigits","dateStrings","dateString","split","patterns","dateTimeDelimiter","timeString","timeZoneDelimiter","substr","timezone","exec","splitDateString","parseYearResult","regex","RegExp","captures","restDateString","century","parseYear","dateRegex","isWeekDate","parseDateUnit","_year","validateWeekDate","isoWeekYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","getUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","parseDate","timestamp","timeRegex","parseTimeUnit","seconds","validateTime","parseTime","tmpDate","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","timezoneString","timezoneRegex","_hours","validateTimezone","parseTimezone","parseFloat","setDate"],"sourceRoot":""}